{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","about","onClick","toogleMode","htmlFor","TextForm","useState","text","setCount","style","color","heading","value","placeholder","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","copyText","document","getElementById","select","navigator","clipboard","writeText","split","length","toFixed","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.72721c40.chunk.js","sourcesContent":["import '../App.css';\r\nimport PropTypes from 'prop-types'\r\nimport React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"#\">{props.about}</a>\r\n                            </li>\r\n                        </ul>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n\r\n\r\n                        <div className={`form-check form-switch text-${props.mode === 'light' ? 'd#212538ark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" onClick={props.toogleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"><strong>Enable Dark Mode</strong></label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Enter the Title\",\r\n    about: \"About Text here\"\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () => {\r\n        //console.log(\"Upper Case was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setCount(newText);\r\n        props.showAlert(\"Converted to Upper Case\", \"success\");\r\n    }\r\n\r\n    const handleLowClick = () => {\r\n        //console.log(\"Upper Case was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setCount(newText);\r\n        props.showAlert(\"Converted to Lower Case\", \"success\");\r\n    }\r\n\r\n    const handleCopyClick = () => {\r\n        let copyText = document.getElementById(\"myBox\");\r\n        copyText.select();\r\n        navigator.clipboard.writeText(copyText.value);\r\n        props.showAlert(\"Text is Copied\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        //console.log(\"Upper Case was clicked\" + text);\r\n        let newText = \"\";\r\n        setCount(newText);\r\n        props.showAlert(\"Text Box is Cleared\", \"success\");\r\n    }\r\n\r\n    const HandleOnChange = (event) => {\r\n        // console.log(\"On Change\");\r\n        setCount(event.target.value);\r\n    }\r\n\r\n\r\n    const [text, setCount] = useState(\"\");\r\n    // setCount(\"New text here\")\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <div className=\"mb-3\">\r\n                    <h3>{props.heading}</h3>\r\n                    <textarea className=\"form-control\" value={text} placeholder=\"Enter text here\" onChange={HandleOnChange} style={{ backgroundColor: props.mode === 'dark' ? '#212538' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Upper Case</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to Lower Case</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopyClick}>Copy Text</button>\r\n            </div>\r\n            <hr />\r\n            <div className=\"container my-2\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h1>Your text summary</h1>\r\n                <p>{text.split(\" \").length - 1} words and {text.length} characters.</p>\r\n                <p>{((0.008 * text.split(\" \").length * 10) - (0.008 * 10)).toFixed(2)} Minutes read</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length > 0 ? text : \"Enter something in Text Box to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong><strong> : {props.alert.msg}</strong>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n\n  const toogleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#212538';\n      showAlert(\"Dark Mode is Enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode is Enabled\", 'success');\n      document.title = \"TextUtils - Light Mode\";\n    }\n  }\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" about=\"About Us\" mode={mode} toogleMode={toogleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n            <Route exact path=\"/about\"> */}\n        {/* <About mode={mode} toogleMode={toogleMode} showAlert={showAlert} /> */}\n        {/* </Route> */}\n        {/* <Route exact path=\"/\"> */}\n        <TextForm heading=\"Enter the text to analyze below\" mode={mode} toogleMode={toogleMode} showAlert={showAlert} />\n        {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}